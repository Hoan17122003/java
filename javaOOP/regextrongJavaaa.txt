Regular Expression trong java
 - ví dụ về mục đích sử dụng
      Chúng ta thường bắt gặp các thông báo như: Mật khẩu phải chứa ký tự hoa, ký tự đặc biệt;
       Định dạng ID, Email không đúng,...hay đơn giản là kiểm tra định dạng của một đầu vào đúng chuẩn hay không? 
       Regular expression trong java chính là thứ đứng đằng sau những thông báo đó.
1. Regular Expression là gì
 - biểu thức chinh quy hay gọi tắt là Regex là 1 dãy các kí tự liên tục, qua nó giúp người sử dụng
 tìm kiếm hoặc so khớp hoặc các thao tác liên quan tuân theo những quy tắc và cú pháp nhất định
2. package java.util.regex trong java
- cung cấp các lớp vào giao diện cơ bản như sau :
  + interface MatchResult
  + lớp Matcher
  + lớp Pattern
  + lớp PatternSyntaxException
lớp Matcher và Pattern trong java cung cấp cơ sở của biểu thức chính quy
2.1 lớp Pattern : là 1 đối tượng MẪU được biên dịch từ 1 biểu thức chính quy(regex), không có constructor public
, chúng ta sử dụng method compile để tạo đối tượng, với tham số là biểu thức chính quy(regex)

các method cơ bản

method                            mô tả
static Pattern compile(String regex): biên dịch regex đã cho và trả về thể hiện của Pattern
Matcher matcher(trình tự đầu vào kiểu kí tự) : Tạo một matcher khớp với đầu vào đã cho với mẫu.
static matches(chuỗi kí tự trình tự đầu vào) : biên dịch regex và tìm kiếm các chuỗi con từ chuỗi input phù hợp với mẫu regex
String[] split(kí tự trình tự đâu vào (input)) : chia chuỗi input đã cho thành mảng các kết qua trùng khớp với đầu vào
String pattern() : trả về mẫu regex
2.2 Lớp Matcher: Là một phương tiện để so khớp chuỗi dữ liệu đầu vào với đối tượng Pattern đã được tạo trước,
 không có constructor public. Chúng ta lấy đối tượng này thông qua method matcher() của đối tượng Pattern với tham số là đầu vào cần kiểm tra.

các method cơ bản
  - boolean matches() : kiểm tra xem regex có khớp với Pattern hay không
  - boolean find() : tìm bieeut thức tiếp theo khớp với Pattern
  - boolean find(int start) : tìm biểu thức tiếp theo khớp với mẫu từ chỉ số bắt đầu
  - String group():	Trả về chuỗi con phù hợp.
  - int start():	Trả về vị trí bắt đầu của chuỗi con phù hợp.
  - int end(): 	Trả về vị trí kết thúc của chuỗi con phù hợp
  - int groupCount() : Trả về tổng số các chuỗi con phù hợp.

3. quy tắc viết Regex trong java

- Regex
- Mô tả
.
So khớp với bất kỳ ký tự đơn nào

^
So khớp phần đầu của chuỗi hay dòng

$
So khớp phần cuối của chuỗi hay dòng

(…)
So khớp với các ‘nhóm’ ký tự bên trong

[…]
So khớp với bất kỳ ký tự đơn nào trong dấu ngoặc vuông

[^…]
So khớp với bất kỳ ký tự đơn nào ngoại trừ các ký tự trong dấu ngoặc vuông

[m-n]
So khớp từ ký tự m đến ký tự n theo thứ tự trong ASCII

XY
So khớp với ‘X theo sau là Y’, ví dụ: [a-e][i-u]

X|Y
So khớp với X hoặc Y

\d
So khớp với ký tự là chữ số, viết tắt của [0-9]

\D
So khớp với ký tự không phải là chữ số, viết tắt của [^0-9]

\s
So khớp với bất kỳ ký tự trống nào (dấu cách, tab, xuống dòng), viết tắt của [\t\n\x0B\f\r]

\S
So khớp với bất kỳ ký tự không phải ký tự trống, viết tắt của [^\s]

\w
So khớp bất kỳ ký tự chữ nào (chữ cái và chữ số), viết tắt của [a-zA-Z0-9]

\W
So khớp bất kỳ ký tự nào không phải chữ cái và chữ số, viết tắt của [^\w]

\b
Ranh giới của một từ

\B
Không phải là ranh giới của một từ

\A
So khớp phần đầu của đầu vào

\G
So khớp phần cuối của đầu vào

X*
So khớp với 0 hoặc nhiều sự xuất hiện của X, viết gọn cho X{0,}

X+
So khớp với 1 hoặc nhiều sự xuất hiện X,  viết gọn cho X{1,}

X?
So khớp 0 hoặc 1 sự xuất hiện của X, viết gọn cho X{0,1}

X{n}
So khớp chính xác n lần sự xuất hiện của X

X{n,}
So khớp n hoặc nhiều hơn số lần xuất hiện của X

X{n,m}
So khớp với ít nhất n và nhiều nhất m lần xuất hiện của X

- toán tử có độ ưu tiên(từ cao tới thâp trong lớp các kí tự)
         1. Literal escape: \x

              Ví dụ: \s, \b,…

          2. Grouping (Phép nhóm): […]

              Ví dụ: [abc]

          3. Range (Miền), ví dụ: a-z (từ a tới z)

          4. Union (Phép hợp): […][…]

              Ví dụ: [a-e][i-u]

          5. Intersection (Phép giao): &&

              Ví dụ: [a-z&&[ueoai]]

Capturing Groups
Capturing Groups là cách coi nhiều nhiều ký tự như môt ký tự đơn.

Ví dụ, Regex (nmd) tạo một nhóm chứa các ký tự n, m, d nhưng xem như “nmd” là một ký tự đơn đễ dễ dàng thao tác.

Capturing groups được đánh số bởi việc tính toán số dấu ngoặc đơn từ trái qua phải.

Ví dụ, trong ((A)(B(C)) có 4 nhóm: ((A)(B(C)), (A), (B(C)) và (C).

Các ký tự đặc biệt: \.[{(*+?^$|

